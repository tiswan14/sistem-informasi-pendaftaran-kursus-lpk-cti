generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  nama          String
  nik           String?   @unique
  jenisKelamin  String
  tempatLahir   String?
  tanggalLahir  String?
  mediaSosial   String?
  noHp          String
  email         String    @unique
  agama         String?
  jurusan       String?
  tahunAkademik String?
  password      String?
  role          String    @default("peserta")
  keahlian      String?
  jabatan       String?
  image         String?
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  kursusInstruktur Kursus[] @relation("InstrukturKursus")

  Account       Account[]
  Session       Session[]
  Pendaftaran   Pendaftaran[]
  HistoriKursus HistoriKursus[]

  @@map("users")
}

model Kursus {
  id        String   @id @default(cuid())
  nama      String
  harga     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?

  user User? @relation("InstrukturKursus", fields: [userId], references: [id], onDelete: Cascade)

  Pendaftaran   Pendaftaran[]
  HistoriKursus HistoriKursus[]

  @@map("kursus")
}

model Pendaftaran {
  id        String   @id @default(cuid())
  userId    String
  kursusId  String
  status    String   @default("Belum diverifikasi")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  kursus     Kursus      @relation(fields: [kursusId], references: [id])
  Pembayaran Pembayaran?
}

model Pembayaran {
  id            String   @id @default(cuid())
  pendaftaranId String   @unique
  metode        String
  jumlah        Int
  buktiBayar    String
  status        String   @default("Menunggu")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt // ✅ Tambahkan ini

  pendaftaran Pendaftaran @relation(fields: [pendaftaranId], references: [id], onDelete: Cascade)
}

model HistoriKursus {
  id             String   @id @default(cuid())
  userId         String
  kursusId       String
  tanggalSelesai String
  sertifikat     String?
  keterangan     String?
  updatedAt      DateTime @updatedAt // ✅ Tambahkan ini

  user   User   @relation(fields: [userId], references: [id])
  kursus Kursus @relation(fields: [kursusId], references: [id])
}
